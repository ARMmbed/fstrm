Integrating libmy/protobuf-c into an autotools project
------------------------------------------------------

This builds an embedded copy of the protobuf-c library into a C project.

The files generated by the protobuf-c compiler ("protoc-c") from a .proto file
are built into the project and distributed by "make dist" and only regenerated
if the source .proto file has been changed.

This allows projects to build distribution tarballs that build without a
dependency on the protobuf-c library and with an optional dependency on the
protobuf-c compiler. That is, "protoc-c" is detected and used if needed, but
the build will fail with a sensible error message if the protobuf-c compiler
is actually needed.

These files are needed:

    libmy/byteorder.m4
    libmy/protobuf-c.am
    libmy/protobuf-c.m4
    libmy/protobuf-c/google/protobuf-c/protobuf-c-private.h
    libmy/protobuf-c/google/protobuf-c/protobuf-c.c
    libmy/protobuf-c/google/protobuf-c/protobuf-c.h

Add to configure.ac:

    m4_include([libmy/protobuf-c.m4])

Add to Makefile.am:

    SUFFIXES =
    include $(top_srcdir)/libmy/protobuf-c.am

Add to a *_SOURCES definiton in Makefile.am:

    $(PROTOBUF_C_SOURCES)

To generate and compile the .pb-c.c and .pb-c.h files from a protobuf schema in
a file named "example.proto", add "example.pb-c.c example.pb-c.h" to a *_SOURCES
definition. Add "example.proto" to EXTRA_DIST to distribute the schema.

The .pb-c.h files generated by the protobuf-c compiler will contain a reference
to <google/protobuf-c/protobuf-c.h>. Add to the AM_CPPFLAGS variable:

    -I${top_srcdir}/libmy/protobuf-c
